// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"time"

	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	CookieAuthScopes = "cookieAuth.Scopes"
)

// Defines values for GetSearchParamsType.
const (
	GetSearchParamsTypeAlbum  GetSearchParamsType = "album"
	GetSearchParamsTypeArtist GetSearchParamsType = "artist"
	GetSearchParamsTypeTrack  GetSearchParamsType = "track"
)

// Album defines model for Album.
type Album struct {
	Artist       *string       `json:"artist,omitempty"`
	AudioQuality *AudioQuality `json:"audioQuality,omitempty"`
	Cover        *string       `json:"cover,omitempty"`
	Downloadable *bool         `json:"downloadable,omitempty"`

	// Duration Total duration in seconds
	Duration            *int     `json:"duration,omitempty"`
	Genre               *string  `json:"genre,omitempty"`
	Id                  *string  `json:"id,omitempty"`
	Label               *string  `json:"label,omitempty"`
	MaximumChannelCount *int     `json:"maximumChannelCount,omitempty"`
	MediaCount          *int     `json:"mediaCount,omitempty"`
	ParentalWarning     *bool    `json:"parental_warning,omitempty"`
	Popularity          *int     `json:"popularity,omitempty"`
	ReleaseDate         *string  `json:"releaseDate,omitempty"`
	Streamable          *bool    `json:"streamable,omitempty"`
	Title               *string  `json:"title,omitempty"`
	TrackCount          *int     `json:"trackCount,omitempty"`
	Tracks              *[]Track `json:"tracks,omitempty"`
	Upc                 *string  `json:"upc,omitempty"`
	Url                 *string  `json:"url,omitempty"`
}

// Artist defines model for Artist.
type Artist struct {
	AlbumsAsPrimaryArtistCount   *int      `json:"albumsAsPrimaryArtistCount,omitempty"`
	AlbumsAsPrimaryComposerCount *int      `json:"albumsAsPrimaryComposerCount,omitempty"`
	AlbumsCount                  *int      `json:"albumsCount,omitempty"`
	Biography                    *string   `json:"biography,omitempty"`
	Id                           *string   `json:"id,omitempty"`
	Image                        *string   `json:"image,omitempty"`
	Information                  *string   `json:"information,omitempty"`
	Name                         *string   `json:"name,omitempty"`
	SimilarArtistIds             *[]string `json:"similarArtistIds,omitempty"`
	Slug                         *string   `json:"slug,omitempty"`
}

// AudioQuality defines model for AudioQuality.
type AudioQuality struct {
	IsHiRes             *bool    `json:"isHiRes,omitempty"`
	MaximumBitDepth     *int     `json:"maximumBitDepth,omitempty"`
	MaximumSamplingRate *float32 `json:"maximumSamplingRate,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Error   *string `json:"error,omitempty"`
	Message *string `json:"message,omitempty"`
}

// Library defines model for Library.
type Library struct {
	CreatedAt   *time.Time `json:"createdAt,omitempty"`
	Description *string    `json:"description,omitempty"`
	Id          *string    `json:"id,omitempty"`
	IsPublic    *bool      `json:"isPublic,omitempty"`
	Name        *string    `json:"name,omitempty"`
	TrackCount  *int       `json:"trackCount,omitempty"`
}

// Pagination defines model for Pagination.
type Pagination struct {
	HasMore *bool `json:"hasMore,omitempty"`
	Limit   *int  `json:"limit,omitempty"`
	Loaded  *int  `json:"loaded,omitempty"`
	Page    *int  `json:"page,omitempty"`
	Total   *int  `json:"total,omitempty"`
}

// Track defines model for Track.
type Track struct {
	AlbumCover   *string       `json:"albumCover,omitempty"`
	AlbumId      *string       `json:"albumId,omitempty"`
	AlbumTitle   *string       `json:"albumTitle,omitempty"`
	Artist       *string       `json:"artist,omitempty"`
	ArtistId     *string       `json:"artistId,omitempty"`
	AudioQuality *AudioQuality `json:"audioQuality,omitempty"`

	// Duration Duration in seconds
	Duration    *int    `json:"duration,omitempty"`
	Genre       *string `json:"genre,omitempty"`
	Id          *string `json:"id,omitempty"`
	ReleaseDate *string `json:"releaseDate,omitempty"`
	Title       *string `json:"title,omitempty"`
}

// User defines model for User.
type User struct {
	CreatedAt *time.Time           `json:"created_at,omitempty"`
	Email     *openapi_types.Email `json:"email,omitempty"`
	Id        *int                 `json:"id,omitempty"`
	Username  *string              `json:"username,omitempty"`
}

// BadRequest defines model for BadRequest.
type BadRequest = Error

// InternalServerError defines model for InternalServerError.
type InternalServerError = Error

// NotFound defines model for NotFound.
type NotFound = Error

// Unauthorized defines model for Unauthorized.
type Unauthorized = Error

// GetAlbumParams defines parameters for GetAlbum.
type GetAlbumParams struct {
	// AlbumId Album ID
	AlbumId string `form:"albumId" json:"albumId"`
}

// PostAuthForgotPasswordJSONBody defines parameters for PostAuthForgotPassword.
type PostAuthForgotPasswordJSONBody struct {
	Email openapi_types.Email `json:"email"`
}

// PostAuthLoginJSONBody defines parameters for PostAuthLogin.
type PostAuthLoginJSONBody struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// PostAuthRegisterJSONBody defines parameters for PostAuthRegister.
type PostAuthRegisterJSONBody struct {
	Email openapi_types.Email `json:"email"`

	// InviteCode Required if invite system is enabled
	InviteCode *string `json:"inviteCode,omitempty"`
	Password   string  `json:"password"`
	Username   string  `json:"username"`
}

// PostAuthResetPasswordJSONBody defines parameters for PostAuthResetPassword.
type PostAuthResetPasswordJSONBody struct {
	Password string `json:"password"`
	Token    string `json:"token"`
}

// GetDiscographyParams defines parameters for GetDiscography.
type GetDiscographyParams struct {
	// ArtistId Artist ID
	ArtistId string `form:"artistId" json:"artistId"`
}

// GetDownloadParams defines parameters for GetDownload.
type GetDownloadParams struct {
	// AlbumId Album ID
	AlbumId string `form:"albumId" json:"albumId"`

	// Quality Audio quality
	Quality *string `form:"quality,omitempty" json:"quality,omitempty"`
}

// DeleteFavoritesParams defines parameters for DeleteFavorites.
type DeleteFavoritesParams struct {
	// TrackId Track ID to remove
	TrackId string `form:"trackId" json:"trackId"`
}

// PostFavoritesJSONBody defines parameters for PostFavorites.
type PostFavoritesJSONBody struct {
	Track Track `json:"track"`
}

// PostLibrariesJSONBody defines parameters for PostLibraries.
type PostLibrariesJSONBody struct {
	Description *string `json:"description,omitempty"`
	IsPublic    *bool   `json:"isPublic,omitempty"`
	Name        string  `json:"name"`
}

// GetLibrariesIdParams defines parameters for GetLibrariesId.
type GetLibrariesIdParams struct {
	// Page Page number for pagination
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of tracks per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// PatchLibrariesIdJSONBody defines parameters for PatchLibrariesId.
type PatchLibrariesIdJSONBody struct {
	Description *string `json:"description,omitempty"`
	IsPublic    *bool   `json:"isPublic,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// PostLibrariesIdTracksJSONBody defines parameters for PostLibrariesIdTracks.
type PostLibrariesIdTracksJSONBody struct {
	Track Track `json:"track"`
}

// GetLyricsParams defines parameters for GetLyrics.
type GetLyricsParams struct {
	// Artist Artist name
	Artist string `form:"artist" json:"artist"`

	// Title Song title
	Title string `form:"title" json:"title"`
}

// PostQueueJSONBody defines parameters for PostQueue.
type PostQueueJSONBody struct {
	Queue []Track `json:"queue"`
}

// GetSearchParams defines parameters for GetSearch.
type GetSearchParams struct {
	// Q Search query
	Q string `form:"q" json:"q"`

	// Type Type of content to search for
	Type *GetSearchParamsType `form:"type,omitempty" json:"type,omitempty"`

	// Limit Number of results to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetSearchParamsType defines parameters for GetSearch.
type GetSearchParamsType string

// GetStreamParams defines parameters for GetStream.
type GetStreamParams struct {
	// TrackId Track ID
	TrackId string `form:"trackId" json:"trackId"`

	// Quality Audio quality
	Quality *string `form:"quality,omitempty" json:"quality,omitempty"`
}

// PostAuthForgotPasswordJSONRequestBody defines body for PostAuthForgotPassword for application/json ContentType.
type PostAuthForgotPasswordJSONRequestBody PostAuthForgotPasswordJSONBody

// PostAuthLoginJSONRequestBody defines body for PostAuthLogin for application/json ContentType.
type PostAuthLoginJSONRequestBody PostAuthLoginJSONBody

// PostAuthRegisterJSONRequestBody defines body for PostAuthRegister for application/json ContentType.
type PostAuthRegisterJSONRequestBody PostAuthRegisterJSONBody

// PostAuthResetPasswordJSONRequestBody defines body for PostAuthResetPassword for application/json ContentType.
type PostAuthResetPasswordJSONRequestBody PostAuthResetPasswordJSONBody

// PostFavoritesJSONRequestBody defines body for PostFavorites for application/json ContentType.
type PostFavoritesJSONRequestBody PostFavoritesJSONBody

// PostLibrariesJSONRequestBody defines body for PostLibraries for application/json ContentType.
type PostLibrariesJSONRequestBody PostLibrariesJSONBody

// PatchLibrariesIdJSONRequestBody defines body for PatchLibrariesId for application/json ContentType.
type PatchLibrariesIdJSONRequestBody PatchLibrariesIdJSONBody

// PostLibrariesIdTracksJSONRequestBody defines body for PostLibrariesIdTracks for application/json ContentType.
type PostLibrariesIdTracksJSONRequestBody PostLibrariesIdTracksJSONBody

// PostQueueJSONRequestBody defines body for PostQueue for application/json ContentType.
type PostQueueJSONRequestBody PostQueueJSONBody
