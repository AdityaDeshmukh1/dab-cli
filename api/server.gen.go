// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get album information
	// (GET /album)
	GetAlbum(ctx echo.Context, params GetAlbumParams) error
	// Get album by ID
	// (GET /album/{id})
	GetAlbumId(ctx echo.Context, id string) error
	// Request password reset
	// (POST /auth/forgot-password)
	PostAuthForgotPassword(ctx echo.Context) error
	// User login
	// (POST /auth/login)
	PostAuthLogin(ctx echo.Context) error
	// User logout
	// (POST /auth/logout)
	PostAuthLogout(ctx echo.Context) error
	// Get current user
	// (GET /auth/me)
	GetAuthMe(ctx echo.Context) error
	// User registration
	// (POST /auth/register)
	PostAuthRegister(ctx echo.Context) error
	// Reset password
	// (POST /auth/reset-password)
	PostAuthResetPassword(ctx echo.Context) error
	// Get artist discography
	// (GET /discography)
	GetDiscography(ctx echo.Context, params GetDiscographyParams) error
	// Get album download information
	// (GET /download)
	GetDownload(ctx echo.Context, params GetDownloadParams) error
	// Remove track from favorites
	// (DELETE /favorites)
	DeleteFavorites(ctx echo.Context, params DeleteFavoritesParams) error
	// Get user favorites
	// (GET /favorites)
	GetFavorites(ctx echo.Context) error
	// Add track to favorites
	// (POST /favorites)
	PostFavorites(ctx echo.Context) error
	// Get user libraries
	// (GET /libraries)
	GetLibraries(ctx echo.Context) error
	// Create library
	// (POST /libraries)
	PostLibraries(ctx echo.Context) error
	// Delete library
	// (DELETE /libraries/{id})
	DeleteLibrariesId(ctx echo.Context, id string) error
	// Get library
	// (GET /libraries/{id})
	GetLibrariesId(ctx echo.Context, id string, params GetLibrariesIdParams) error
	// Update library
	// (PATCH /libraries/{id})
	PatchLibrariesId(ctx echo.Context, id string) error
	// Add track to library
	// (POST /libraries/{id}/tracks)
	PostLibrariesIdTracks(ctx echo.Context, id string) error
	// Remove track from library
	// (DELETE /libraries/{id}/tracks/{trackId})
	DeleteLibrariesIdTracksTrackId(ctx echo.Context, id string, trackId string) error
	// Get song lyrics
	// (GET /lyrics)
	GetLyrics(ctx echo.Context, params GetLyricsParams) error
	// Clear user queue
	// (DELETE /queue)
	DeleteQueue(ctx echo.Context) error
	// Get user queue
	// (GET /queue)
	GetQueue(ctx echo.Context) error
	// Save user queue
	// (POST /queue)
	PostQueue(ctx echo.Context) error
	// Search for music
	// (GET /search)
	GetSearch(ctx echo.Context, params GetSearchParams) error
	// Stream audio track
	// (GET /stream)
	GetStream(ctx echo.Context, params GetStreamParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAlbum converts echo context to params.
func (w *ServerInterfaceWrapper) GetAlbum(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAlbumParams
	// ------------- Required query parameter "albumId" -------------

	err = runtime.BindQueryParameter("form", true, true, "albumId", ctx.QueryParams(), &params.AlbumId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter albumId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAlbum(ctx, params)
	return err
}

// GetAlbumId converts echo context to params.
func (w *ServerInterfaceWrapper) GetAlbumId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAlbumId(ctx, id)
	return err
}

// PostAuthForgotPassword converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthForgotPassword(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAuthForgotPassword(ctx)
	return err
}

// PostAuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAuthLogin(ctx)
	return err
}

// PostAuthLogout converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthLogout(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAuthLogout(ctx)
	return err
}

// GetAuthMe converts echo context to params.
func (w *ServerInterfaceWrapper) GetAuthMe(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAuthMe(ctx)
	return err
}

// PostAuthRegister converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthRegister(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAuthRegister(ctx)
	return err
}

// PostAuthResetPassword converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthResetPassword(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAuthResetPassword(ctx)
	return err
}

// GetDiscography converts echo context to params.
func (w *ServerInterfaceWrapper) GetDiscography(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDiscographyParams
	// ------------- Required query parameter "artistId" -------------

	err = runtime.BindQueryParameter("form", true, true, "artistId", ctx.QueryParams(), &params.ArtistId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter artistId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDiscography(ctx, params)
	return err
}

// GetDownload converts echo context to params.
func (w *ServerInterfaceWrapper) GetDownload(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDownloadParams
	// ------------- Required query parameter "albumId" -------------

	err = runtime.BindQueryParameter("form", true, true, "albumId", ctx.QueryParams(), &params.AlbumId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter albumId: %s", err))
	}

	// ------------- Optional query parameter "quality" -------------

	err = runtime.BindQueryParameter("form", true, false, "quality", ctx.QueryParams(), &params.Quality)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter quality: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDownload(ctx, params)
	return err
}

// DeleteFavorites converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteFavorites(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteFavoritesParams
	// ------------- Required query parameter "trackId" -------------

	err = runtime.BindQueryParameter("form", true, true, "trackId", ctx.QueryParams(), &params.TrackId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trackId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteFavorites(ctx, params)
	return err
}

// GetFavorites converts echo context to params.
func (w *ServerInterfaceWrapper) GetFavorites(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFavorites(ctx)
	return err
}

// PostFavorites converts echo context to params.
func (w *ServerInterfaceWrapper) PostFavorites(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostFavorites(ctx)
	return err
}

// GetLibraries converts echo context to params.
func (w *ServerInterfaceWrapper) GetLibraries(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLibraries(ctx)
	return err
}

// PostLibraries converts echo context to params.
func (w *ServerInterfaceWrapper) PostLibraries(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLibraries(ctx)
	return err
}

// DeleteLibrariesId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteLibrariesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteLibrariesId(ctx, id)
	return err
}

// GetLibrariesId converts echo context to params.
func (w *ServerInterfaceWrapper) GetLibrariesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLibrariesIdParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLibrariesId(ctx, id, params)
	return err
}

// PatchLibrariesId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchLibrariesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchLibrariesId(ctx, id)
	return err
}

// PostLibrariesIdTracks converts echo context to params.
func (w *ServerInterfaceWrapper) PostLibrariesIdTracks(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLibrariesIdTracks(ctx, id)
	return err
}

// DeleteLibrariesIdTracksTrackId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteLibrariesIdTracksTrackId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "trackId" -------------
	var trackId string

	err = runtime.BindStyledParameterWithOptions("simple", "trackId", ctx.Param("trackId"), &trackId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trackId: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteLibrariesIdTracksTrackId(ctx, id, trackId)
	return err
}

// GetLyrics converts echo context to params.
func (w *ServerInterfaceWrapper) GetLyrics(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLyricsParams
	// ------------- Required query parameter "artist" -------------

	err = runtime.BindQueryParameter("form", true, true, "artist", ctx.QueryParams(), &params.Artist)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter artist: %s", err))
	}

	// ------------- Required query parameter "title" -------------

	err = runtime.BindQueryParameter("form", true, true, "title", ctx.QueryParams(), &params.Title)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter title: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLyrics(ctx, params)
	return err
}

// DeleteQueue converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteQueue(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteQueue(ctx)
	return err
}

// GetQueue converts echo context to params.
func (w *ServerInterfaceWrapper) GetQueue(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetQueue(ctx)
	return err
}

// PostQueue converts echo context to params.
func (w *ServerInterfaceWrapper) PostQueue(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostQueue(ctx)
	return err
}

// GetSearch converts echo context to params.
func (w *ServerInterfaceWrapper) GetSearch(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSearchParams
	// ------------- Required query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, true, "q", ctx.QueryParams(), &params.Q)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter q: %s", err))
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", ctx.QueryParams(), &params.Type)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSearch(ctx, params)
	return err
}

// GetStream converts echo context to params.
func (w *ServerInterfaceWrapper) GetStream(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetStreamParams
	// ------------- Required query parameter "trackId" -------------

	err = runtime.BindQueryParameter("form", true, true, "trackId", ctx.QueryParams(), &params.TrackId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter trackId: %s", err))
	}

	// ------------- Optional query parameter "quality" -------------

	err = runtime.BindQueryParameter("form", true, false, "quality", ctx.QueryParams(), &params.Quality)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter quality: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStream(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/album", wrapper.GetAlbum)
	router.GET(baseURL+"/album/:id", wrapper.GetAlbumId)
	router.POST(baseURL+"/auth/forgot-password", wrapper.PostAuthForgotPassword)
	router.POST(baseURL+"/auth/login", wrapper.PostAuthLogin)
	router.POST(baseURL+"/auth/logout", wrapper.PostAuthLogout)
	router.GET(baseURL+"/auth/me", wrapper.GetAuthMe)
	router.POST(baseURL+"/auth/register", wrapper.PostAuthRegister)
	router.POST(baseURL+"/auth/reset-password", wrapper.PostAuthResetPassword)
	router.GET(baseURL+"/discography", wrapper.GetDiscography)
	router.GET(baseURL+"/download", wrapper.GetDownload)
	router.DELETE(baseURL+"/favorites", wrapper.DeleteFavorites)
	router.GET(baseURL+"/favorites", wrapper.GetFavorites)
	router.POST(baseURL+"/favorites", wrapper.PostFavorites)
	router.GET(baseURL+"/libraries", wrapper.GetLibraries)
	router.POST(baseURL+"/libraries", wrapper.PostLibraries)
	router.DELETE(baseURL+"/libraries/:id", wrapper.DeleteLibrariesId)
	router.GET(baseURL+"/libraries/:id", wrapper.GetLibrariesId)
	router.PATCH(baseURL+"/libraries/:id", wrapper.PatchLibrariesId)
	router.POST(baseURL+"/libraries/:id/tracks", wrapper.PostLibrariesIdTracks)
	router.DELETE(baseURL+"/libraries/:id/tracks/:trackId", wrapper.DeleteLibrariesIdTracksTrackId)
	router.GET(baseURL+"/lyrics", wrapper.GetLyrics)
	router.DELETE(baseURL+"/queue", wrapper.DeleteQueue)
	router.GET(baseURL+"/queue", wrapper.GetQueue)
	router.POST(baseURL+"/queue", wrapper.PostQueue)
	router.GET(baseURL+"/search", wrapper.GetSearch)
	router.GET(baseURL+"/stream", wrapper.GetStream)

}
